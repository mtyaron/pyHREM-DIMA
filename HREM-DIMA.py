# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'hrem-dima.ui'
#
# Created by: PyQt5 UI code generator 5.9.2
#
# WARNING! All changes made in this file will be lost!

import sys
import re,os,numpy as np
import shutil
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QShortcut, QMessageBox
from PyQt5.QtGui import QPixmap, QKeySequence
from PIL import Image, ImageQt
import matplotlib as mpl
from scipy.signal import fftconvolve
from sewar.full_ref import *       # Matching metrics : mse, rmse, psnr, rmse_sw, uqi, 
                                    #    ssim, ergas, scc, rase, sam, msssim, vifp, psnrb 

home_path = os.getcwd()
#path="back.png"
num=0     
class Ui_mainWindow(object):

    def setupUi(self, mainWindow):
        mainWindow.setObjectName("mainWindow")
        mainWindow.resize(1264, 922)
        mainWindow.setDocumentMode(False)
        mainWindow.setDockNestingEnabled(False)
        self.centralwidget = QtWidgets.QWidget(mainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame.sizePolicy().hasHeightForWidth())
        self.frame.setSizePolicy(sizePolicy)
        self.frame.setMinimumSize(QtCore.QSize(0, 0))
        self.frame.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.frame.setFont(font)
        self.frame.setMouseTracking(False)
        self.frame.setFocusPolicy(QtCore.Qt.NoFocus)
        self.frame.setAutoFillBackground(False)
        self.frame.setFrameShape(QtWidgets.QFrame.Box)
        self.frame.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.frame.setLineWidth(1)
        self.frame.setMidLineWidth(0)
        self.frame.setObjectName("frame")
        self.BuildCrystal = QtWidgets.QGroupBox(self.frame)
        self.BuildCrystal.setEnabled(True)
        self.BuildCrystal.setGeometry(QtCore.QRect(10, 10, 301, 231))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.BuildCrystal.setFont(font)
        self.BuildCrystal.setToolTipDuration(-1)
        self.BuildCrystal.setAlignment(QtCore.Qt.AlignCenter)
        self.BuildCrystal.setFlat(False)
        self.BuildCrystal.setCheckable(False)
        self.BuildCrystal.setObjectName("BuildCrystal")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.BuildCrystal)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.Box_Yaxis_label = QtWidgets.QPushButton(self.BuildCrystal)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Box_Yaxis_label.setFont(font)
        self.Box_Yaxis_label.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Box_Yaxis_label.setMouseTracking(False)
        self.Box_Yaxis_label.setFlat(True)
        self.Box_Yaxis_label.setObjectName("Box_Yaxis_label")
        self.gridLayout_2.addWidget(self.Box_Yaxis_label, 3, 0, 1, 1)
        self.AcclV_label = QtWidgets.QPushButton(self.BuildCrystal)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.AcclV_label.setFont(font)
        self.AcclV_label.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.AcclV_label.setMouseTracking(False)
        self.AcclV_label.setFlat(True)
        self.AcclV_label.setObjectName("AcclV_label")
        self.gridLayout_2.addWidget(self.AcclV_label, 5, 0, 1, 2)
        self.browse_cif = QtWidgets.QPushButton(self.BuildCrystal)
        self.browse_cif.setEnabled(True)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.browse_cif.setFont(font)
        self.browse_cif.setObjectName("browse_cif")
        self.gridLayout_2.addWidget(self.browse_cif, 0, 4, 1, 1)
        self.new_Z_axis = QtWidgets.QLineEdit(self.BuildCrystal)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.new_Z_axis.setFont(font)
        self.new_Z_axis.setAlignment(QtCore.Qt.AlignCenter)
        self.new_Z_axis.setObjectName("new_Z_axis")
        self.gridLayout_2.addWidget(self.new_Z_axis, 4, 2, 1, 2)
        self.Filename_cryst = QtWidgets.QLabel(self.BuildCrystal)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Filename_cryst.setFont(font)
        self.Filename_cryst.setObjectName("Filename_cryst")
        self.gridLayout_2.addWidget(self.Filename_cryst, 0, 0, 1, 1)
        self.CIF_filename = QtWidgets.QLineEdit(self.BuildCrystal)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.CIF_filename.setFont(font)
        self.CIF_filename.setObjectName("CIF_filename")
        self.gridLayout_2.addWidget(self.CIF_filename, 0, 1, 1, 2)
        self.new_Y_axis = QtWidgets.QLineEdit(self.BuildCrystal)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.new_Y_axis.setFont(font)
        self.new_Y_axis.setAlignment(QtCore.Qt.AlignCenter)
        self.new_Y_axis.setObjectName("new_Y_axis")
        self.gridLayout_2.addWidget(self.new_Y_axis, 3, 2, 1, 2)
        self.new_X_axis = QtWidgets.QLineEdit(self.BuildCrystal)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.new_X_axis.setFont(font)
        self.new_X_axis.setAlignment(QtCore.Qt.AlignCenter)
        self.new_X_axis.setObjectName("new_X_axis")
        self.gridLayout_2.addWidget(self.new_X_axis, 1, 2, 1, 2)
        self.cif_lable = QtWidgets.QLabel(self.BuildCrystal)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.cif_lable.setFont(font)
        self.cif_lable.setObjectName("cif_lable")
        self.gridLayout_2.addWidget(self.cif_lable, 0, 3, 1, 1)
        self.ZA = QtWidgets.QLabel(self.BuildCrystal)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.ZA.setFont(font)
        self.ZA.setObjectName("ZA")
        self.gridLayout_2.addWidget(self.ZA, 4, 4, 1, 1)
        self.accelV = QtWidgets.QSpinBox(self.BuildCrystal)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.accelV.setFont(font)
        self.accelV.setMaximum(1250)
        self.accelV.setSingleStep(10)
        self.accelV.setProperty("value", 300)
        self.accelV.setObjectName("accelV")
        self.gridLayout_2.addWidget(self.accelV, 5, 4, 1, 1)
        self.accelV_slider = QtWidgets.QSlider(self.BuildCrystal)
        self.accelV_slider.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.accelV_slider.setMaximum(1250)
        self.accelV_slider.setSingleStep(10)
        self.accelV_slider.setProperty("value", 300)
        self.accelV_slider.setOrientation(QtCore.Qt.Horizontal)
        self.accelV_slider.setObjectName("accelV_slider")
        self.gridLayout_2.addWidget(self.accelV_slider, 5, 2, 1, 2)
        self.Box_Xaxis_label = QtWidgets.QPushButton(self.BuildCrystal)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Box_Xaxis_label.setFont(font)
        self.Box_Xaxis_label.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Box_Xaxis_label.setMouseTracking(False)
        self.Box_Xaxis_label.setFlat(True)
        self.Box_Xaxis_label.setObjectName("Box_Xaxis_label")
        self.gridLayout_2.addWidget(self.Box_Xaxis_label, 1, 0, 1, 1)
        self.Box_Zaxis_label = QtWidgets.QPushButton(self.BuildCrystal)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Box_Zaxis_label.setFont(font)
        self.Box_Zaxis_label.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Box_Zaxis_label.setMouseTracking(False)
        self.Box_Zaxis_label.setFlat(True)
        self.Box_Zaxis_label.setObjectName("Box_Zaxis_label")
        self.gridLayout_2.addWidget(self.Box_Zaxis_label, 4, 0, 1, 1)
        self.groupBox = QtWidgets.QGroupBox(self.frame)
        self.groupBox.setGeometry(QtCore.QRect(10, 247, 301, 281))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.groupBox.setFont(font)
        self.groupBox.setAlignment(QtCore.Qt.AlignCenter)
        self.groupBox.setObjectName("groupBox")
        self.gridLayout = QtWidgets.QGridLayout(self.groupBox)
        self.gridLayout.setObjectName("gridLayout")
        self.Transparency_slider = QtWidgets.QSlider(self.groupBox)
        self.Transparency_slider.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Transparency_slider.setInputMethodHints(QtCore.Qt.ImhNone)
        self.Transparency_slider.setMaximum(10)
        self.Transparency_slider.setPageStep(1)
        self.Transparency_slider.setProperty("value", 10)
        self.Transparency_slider.setOrientation(QtCore.Qt.Horizontal)
        self.Transparency_slider.setInvertedControls(False)
        self.Transparency_slider.setTickInterval(1)
        self.Transparency_slider.setObjectName("Transparency_slider")
        self.gridLayout.addWidget(self.Transparency_slider, 1, 2, 1, 1)
        self.Ttransp_val = QtWidgets.QDoubleSpinBox(self.groupBox)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Ttransp_val.setFont(font)
        self.Ttransp_val.setDecimals(1)
        self.Ttransp_val.setMaximum(1.0)
        self.Ttransp_val.setSingleStep(0.1)
        self.Ttransp_val.setProperty("value", 1.0)
        self.Ttransp_val.setObjectName("Ttransp_val")
        self.gridLayout.addWidget(self.Ttransp_val, 1, 3, 1, 1)
        self.X_slider = QtWidgets.QSlider(self.groupBox)
        self.X_slider.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.X_slider.setMinimum(-100)
        self.X_slider.setMaximum(100)
        self.X_slider.setOrientation(QtCore.Qt.Horizontal)
        self.X_slider.setInvertedControls(False)
        self.X_slider.setTickInterval(1)
        self.X_slider.setObjectName("X_slider")
        self.gridLayout.addWidget(self.X_slider, 2, 2, 1, 1)
        self.X_val = QtWidgets.QSpinBox(self.groupBox)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.X_val.setFont(font)
        self.X_val.setMinimum(-100)
        self.X_val.setMaximum(100)
        self.X_val.setSingleStep(1)
        self.X_val.setProperty("value", 0)
        self.X_val.setDisplayIntegerBase(10)
        self.X_val.setObjectName("X_val")
        self.gridLayout.addWidget(self.X_val, 2, 3, 1, 1)
        self.Y_val = QtWidgets.QSpinBox(self.groupBox)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Y_val.setFont(font)
        self.Y_val.setMinimum(-100)
        self.Y_val.setMaximum(100)
        self.Y_val.setSingleStep(1)
        self.Y_val.setProperty("value", 0)
        self.Y_val.setDisplayIntegerBase(10)
        self.Y_val.setObjectName("Y_val")
        self.gridLayout.addWidget(self.Y_val, 3, 3, 1, 1)
        self.Y_slider = QtWidgets.QSlider(self.groupBox)
        self.Y_slider.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Y_slider.setMinimum(-100)
        self.Y_slider.setMaximum(100)
        self.Y_slider.setOrientation(QtCore.Qt.Horizontal)
        self.Y_slider.setInvertedControls(False)
        self.Y_slider.setTickInterval(1)
        self.Y_slider.setObjectName("Y_slider")
        self.gridLayout.addWidget(self.Y_slider, 3, 2, 1, 1)
        self.Rot_slider = QtWidgets.QSlider(self.groupBox)
        self.Rot_slider.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Rot_slider.setMinimum(-180)
        self.Rot_slider.setMaximum(180)
        self.Rot_slider.setOrientation(QtCore.Qt.Horizontal)
        self.Rot_slider.setInvertedControls(False)
        self.Rot_slider.setTickPosition(QtWidgets.QSlider.NoTicks)
        self.Rot_slider.setTickInterval(30)
        self.Rot_slider.setObjectName("Rot_slider")
        self.gridLayout.addWidget(self.Rot_slider, 4, 2, 1, 1)
        self.Rot_val = QtWidgets.QSpinBox(self.groupBox)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Rot_val.setFont(font)
        self.Rot_val.setMinimum(-180)
        self.Rot_val.setMaximum(180)
        self.Rot_val.setSingleStep(1)
        self.Rot_val.setProperty("value", 0)
        self.Rot_val.setDisplayIntegerBase(10)
        self.Rot_val.setObjectName("Rot_val")
        self.gridLayout.addWidget(self.Rot_val, 4, 3, 1, 1)
        self.Mag_val = QtWidgets.QDoubleSpinBox(self.groupBox)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Mag_val.setFont(font)
        self.Mag_val.setDecimals(2)
        self.Mag_val.setMinimum(0.01)
        self.Mag_val.setMaximum(1.00)
        self.Mag_val.setSingleStep(0.01)
        self.Mag_val.setProperty("value", 0.25)
        self.Mag_val.setObjectName("Mag_val")
        self.gridLayout.addWidget(self.Mag_val, 5, 3, 1, 1)
        self.Mag_slider = QtWidgets.QSlider(self.groupBox)
        self.Mag_slider.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Mag_slider.setMinimum(1)
        self.Mag_slider.setMaximum(100)
        self.Mag_slider.setProperty("value", 25)
        self.Mag_slider.setOrientation(QtCore.Qt.Horizontal)
        self.Mag_slider.setInvertedControls(False)
        self.Mag_slider.setTickPosition(QtWidgets.QSlider.NoTicks)
        self.Mag_slider.setTickInterval(20)
        self.Mag_slider.setObjectName("Mag_slider")
        self.gridLayout.addWidget(self.Mag_slider, 5, 2, 1, 1)
        self.colormap_combo = QtWidgets.QComboBox(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.colormap_combo.sizePolicy().hasHeightForWidth())
        self.colormap_combo.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.colormap_combo.setFont(font)
        self.colormap_combo.setObjectName("colormap_combo")
        self.colormap_combo.addItem("gray")
        self.colormap_combo.addItem("")
        self.colormap_combo.addItem("")
        self.colormap_combo.currentTextChanged.connect(self.Transform_overlayed_sim)

        self.gridLayout.addWidget(self.colormap_combo, 0, 1, 1, 3)
        self.Mag_label = QtWidgets.QPushButton(self.groupBox)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Mag_label.setFont(font)
        self.Mag_label.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Mag_label.setMouseTracking(False)
        self.Mag_label.setFlat(True)
        self.Mag_label.setObjectName("Mag_label")
        self.gridLayout.addWidget(self.Mag_label, 5, 0, 1, 1)
        self.Rot_label = QtWidgets.QPushButton(self.groupBox)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Rot_label.setFont(font)
        self.Rot_label.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Rot_label.setFlat(True)
        self.Rot_label.setObjectName("Rot_label")
        self.gridLayout.addWidget(self.Rot_label, 4, 0, 1, 1)
        self.Shift_Y_label = QtWidgets.QPushButton(self.groupBox)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Shift_Y_label.setFont(font)
        self.Shift_Y_label.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Shift_Y_label.setMouseTracking(False)
        self.Shift_Y_label.setFlat(True)
        self.Shift_Y_label.setObjectName("Shift_Y_label")
        self.gridLayout.addWidget(self.Shift_Y_label, 3, 0, 1, 1)
        self.Shift_X_label = QtWidgets.QPushButton(self.groupBox)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Shift_X_label.setFont(font)
        self.Shift_X_label.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Shift_X_label.setMouseTracking(False)
        self.Shift_X_label.setFlat(True)
        self.Shift_X_label.setObjectName("Shift_X_label")
        self.gridLayout.addWidget(self.Shift_X_label, 2, 0, 1, 1)
        self.Trans_label = QtWidgets.QPushButton(self.groupBox)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Trans_label.setFont(font)
        self.Trans_label.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Trans_label.setMouseTracking(False)
        self.Trans_label.setFlat(True)
        self.Trans_label.setObjectName("Trans_label")
        self.gridLayout.addWidget(self.Trans_label, 1, 0, 1, 1)
        self.colormap_label = QtWidgets.QPushButton(self.groupBox)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.colormap_label.setFont(font)
        self.colormap_label.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.colormap_label.setFlat(True)
        self.colormap_label.setObjectName("colormap_label")
        self.gridLayout.addWidget(self.colormap_label, 0, 0, 1, 1)
        self.groupBox_2 = QtWidgets.QGroupBox(self.frame)
        self.groupBox_2.setGeometry(QtCore.QRect(320, 10, 321, 301))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setAlignment(QtCore.Qt.AlignCenter)
        self.groupBox_2.setObjectName("groupBox_2")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.groupBox_2)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.Aperture_slider = QtWidgets.QSlider(self.groupBox_2)
        self.Aperture_slider.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Aperture_slider.setAutoFillBackground(False)
        self.Aperture_slider.setMinimum(0)
        self.Aperture_slider.setMaximum(1000)
        self.Aperture_slider.setProperty("value", 250)
        self.Aperture_slider.setTracking(True)
        self.Aperture_slider.setOrientation(QtCore.Qt.Horizontal)
        self.Aperture_slider.setInvertedAppearance(False)
        self.Aperture_slider.setInvertedControls(False)
        self.Aperture_slider.setTickInterval(1)
        self.Aperture_slider.setObjectName("Aperture_slider")
        self.gridLayout_3.addWidget(self.Aperture_slider, 1, 1, 1, 1)
        self.Def_val = QtWidgets.QSpinBox(self.groupBox_2)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Def_val.setFont(font)
        self.Def_val.setMinimum(-1000)
        self.Def_val.setMaximum(1000)
        self.Def_val.setSingleStep(1)
        self.Def_val.setProperty("value", 0)
        self.Def_val.setDisplayIntegerBase(10)
        self.Def_val.setObjectName("Def_val")
        self.gridLayout_3.addWidget(self.Def_val, 7, 2, 1, 1)
        self.Thick_val = QtWidgets.QSpinBox(self.groupBox_2)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Thick_val.setFont(font)
        self.Thick_val.setMinimum(2)
        self.Thick_val.setMaximum(2000)
        self.Thick_val.setSingleStep(1)
        self.Thick_val.setProperty("value", 10)
        self.Thick_val.setDisplayIntegerBase(10)
        self.Thick_val.setObjectName("Thick_val")
        self.gridLayout_3.addWidget(self.Thick_val, 8, 2, 1, 1)
        self.FocSpread_slider = QtWidgets.QSlider(self.groupBox_2)
        self.FocSpread_slider.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.FocSpread_slider.setMaximum(360)
        self.FocSpread_slider.setOrientation(QtCore.Qt.Horizontal)
        self.FocSpread_slider.setInvertedControls(False)
        self.FocSpread_slider.setTickInterval(1)
        self.FocSpread_slider.setObjectName("FocSpread_slider")
        self.gridLayout_3.addWidget(self.FocSpread_slider, 3, 1, 1, 1)
        self.Conv_slider = QtWidgets.QSlider(self.groupBox_2)
        self.Conv_slider.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Conv_slider.setMaximum(500)
        self.Conv_slider.setOrientation(QtCore.Qt.Horizontal)
        self.Conv_slider.setInvertedControls(False)
        self.Conv_slider.setTickInterval(1)
        self.Conv_slider.setObjectName("Conv_slider")
        self.gridLayout_3.addWidget(self.Conv_slider, 4, 1, 1, 1)
        self.Duplicate_val = QtWidgets.QSpinBox(self.groupBox_2)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Duplicate_val.setFont(font)
        self.Duplicate_val.setMinimum(1)
        self.Duplicate_val.setMaximum(100)
        self.Duplicate_val.setSingleStep(1)
        self.Duplicate_val.setProperty("value", 2)
        self.Duplicate_val.setDisplayIntegerBase(10)
        self.Duplicate_val.setObjectName("Duplicate_val")
        self.gridLayout_3.addWidget(self.Duplicate_val, 0, 2, 1, 1)
        self.Dup_slider = QtWidgets.QSlider(self.groupBox_2)
        self.Dup_slider.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Dup_slider.setInputMethodHints(QtCore.Qt.ImhNone)
        self.Dup_slider.setMinimum(1)
        self.Dup_slider.setMaximum(100)
        self.Dup_slider.setPageStep(1)
        self.Dup_slider.setProperty("value", 2)
        self.Dup_slider.setOrientation(QtCore.Qt.Horizontal)
        self.Dup_slider.setInvertedControls(False)
        self.Dup_slider.setTickInterval(1)
        self.Dup_slider.setObjectName("Dup_slider")
        self.gridLayout_3.addWidget(self.Dup_slider, 0, 1, 1, 1)
        self.Thick_slider = QtWidgets.QSlider(self.groupBox_2)
        self.Thick_slider.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Thick_slider.setMinimum(2)
        self.Thick_slider.setMaximum(2000)
        self.Thick_slider.setProperty("value", 100)
        self.Thick_slider.setOrientation(QtCore.Qt.Horizontal)
        self.Thick_slider.setInvertedControls(False)
        self.Thick_slider.setTickInterval(1)
        self.Thick_slider.setObjectName("Thick_slider")
        self.gridLayout_3.addWidget(self.Thick_slider, 8, 1, 1, 1)
        self.Cs_slider = QtWidgets.QSlider(self.groupBox_2)
        self.Cs_slider.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Cs_slider.setMinimum(-2000)
        self.Cs_slider.setMaximum(2000)
        self.Cs_slider.setOrientation(QtCore.Qt.Horizontal)
        self.Cs_slider.setInvertedControls(False)
        self.Cs_slider.setTickInterval(1)
        self.Cs_slider.setObjectName("Cs_slider")
        self.gridLayout_3.addWidget(self.Cs_slider, 2, 1, 1, 1)
        self.Def_slider = QtWidgets.QSlider(self.groupBox_2)
        self.Def_slider.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Def_slider.setMinimum(-1000)
        self.Def_slider.setMaximum(1000)
        self.Def_slider.setOrientation(QtCore.Qt.Horizontal)
        self.Def_slider.setInvertedControls(False)
        self.Def_slider.setTickInterval(1)
        self.Def_slider.setObjectName("Def_slider")
        self.gridLayout_3.addWidget(self.Def_slider, 7, 1, 1, 1)
        self.Delta = QtWidgets.QSpinBox(self.groupBox_2)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Delta.setFont(font)
        self.Delta.setMaximum(360)
        self.Delta.setSingleStep(100)
        self.Delta.setProperty("value", 0)
        self.Delta.setDisplayIntegerBase(10)
        self.Delta.setObjectName("Delta")
        self.gridLayout_3.addWidget(self.Delta, 3, 2, 1, 1)
        self.Aperture_val = QtWidgets.QDoubleSpinBox(self.groupBox_2)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Aperture_val.setFont(font)
        self.Aperture_val.setMaximum(100.0)
        self.Aperture_val.setProperty("value", 25.0)
        self.Aperture_val.setObjectName("Aperture_val")
        self.gridLayout_3.addWidget(self.Aperture_val, 1, 2, 1, 1)
        self.Cs_val = QtWidgets.QDoubleSpinBox(self.groupBox_2)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Cs_val.setFont(font)
        self.Cs_val.setDecimals(3)
        self.Cs_val.setMinimum(-2.0)
        self.Cs_val.setMaximum(2.0)
        self.Cs_val.setSingleStep(0.001)
        self.Cs_val.setObjectName("Cs_val")
        self.gridLayout_3.addWidget(self.Cs_val, 2, 2, 1, 1)
        self.ConvAngle = QtWidgets.QDoubleSpinBox(self.groupBox_2)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.ConvAngle.setFont(font)
        self.ConvAngle.setMaximum(50.0)
        self.ConvAngle.setObjectName("ConvAngle")
        self.gridLayout_3.addWidget(self.ConvAngle, 4, 2, 1, 1)
        self.Dup_label = QtWidgets.QPushButton(self.groupBox_2)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Dup_label.setFont(font)
        self.Dup_label.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Dup_label.setMouseTracking(False)
        self.Dup_label.setFlat(True)
        self.Dup_label.setObjectName("Dup_label")
        self.gridLayout_3.addWidget(self.Dup_label, 0, 0, 1, 1)
        self.Aperture_size_label = QtWidgets.QPushButton(self.groupBox_2)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Aperture_size_label.setFont(font)
        self.Aperture_size_label.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Aperture_size_label.setMouseTracking(False)
        self.Aperture_size_label.setFlat(True)
        self.Aperture_size_label.setObjectName("Aperture_size_label")
        self.gridLayout_3.addWidget(self.Aperture_size_label, 1, 0, 1, 1)
        self.Cs_label = QtWidgets.QPushButton(self.groupBox_2)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Cs_label.setFont(font)
        self.Cs_label.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Cs_label.setMouseTracking(False)
        self.Cs_label.setFlat(True)
        self.Cs_label.setObjectName("Cs_label")
        self.gridLayout_3.addWidget(self.Cs_label, 2, 0, 1, 1)
        self.Focal_label = QtWidgets.QPushButton(self.groupBox_2)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Focal_label.setFont(font)
        self.Focal_label.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Focal_label.setMouseTracking(False)
        self.Focal_label.setFlat(True)
        self.Focal_label.setObjectName("Focal_label")
        self.gridLayout_3.addWidget(self.Focal_label, 3, 0, 1, 1)
        self.Conv_label = QtWidgets.QPushButton(self.groupBox_2)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Conv_label.setFont(font)
        self.Conv_label.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Conv_label.setMouseTracking(False)
        self.Conv_label.setFlat(True)
        self.Conv_label.setObjectName("Conv_label")
        self.gridLayout_3.addWidget(self.Conv_label, 4, 0, 1, 1)
        self.Def_label = QtWidgets.QPushButton(self.groupBox_2)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Def_label.setFont(font)
        self.Def_label.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Def_label.setMouseTracking(False)
        self.Def_label.setFlat(True)
        self.Def_label.setObjectName("Def_label")
        self.gridLayout_3.addWidget(self.Def_label, 7, 0, 1, 1)
        self.Thick_label = QtWidgets.QPushButton(self.groupBox_2)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Thick_label.setFont(font)
        self.Thick_label.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Thick_label.setMouseTracking(False)
        self.Thick_label.setFlat(True)
        self.Thick_label.setObjectName("Thick_label")
        self.gridLayout_3.addWidget(self.Thick_label, 8, 0, 1, 1)
        self.groupBox_3 = QtWidgets.QGroupBox(self.frame)
        self.groupBox_3.setGeometry(QtCore.QRect(320, 313, 321, 211))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_3.setFont(font)
        self.groupBox_3.setTitle("Aberrations")
        self.groupBox_3.setAlignment(QtCore.Qt.AlignCenter)
        self.groupBox_3.setCheckable(False)
        self.groupBox_3.setObjectName("groupBox_3")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.groupBox_3)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.Aberration_amp = QtWidgets.QLabel(self.groupBox_3)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Aberration_amp.setFont(font)
        self.Aberration_amp.setObjectName("Aberration_amp")
        self.gridLayout_4.addWidget(self.Aberration_amp, 0, 1, 1, 1, QtCore.Qt.AlignHCenter)
        self.Aberration_ang = QtWidgets.QLabel(self.groupBox_3)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Aberration_ang.setFont(font)
        self.Aberration_ang.setObjectName("Aberration_ang")
        self.gridLayout_4.addWidget(self.Aberration_ang, 0, 2, 1, 1, QtCore.Qt.AlignHCenter)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.Twofold_Ast_amp_val = QtWidgets.QSpinBox(self.groupBox_3)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Twofold_Ast_amp_val.setFont(font)
        self.Twofold_Ast_amp_val.setMinimum(-100)
        self.Twofold_Ast_amp_val.setMaximum(100)
        self.Twofold_Ast_amp_val.setSingleStep(100)
        self.Twofold_Ast_amp_val.setProperty("value", 0)
        self.Twofold_Ast_amp_val.setDisplayIntegerBase(10)
        self.Twofold_Ast_amp_val.setObjectName("Twofold_Ast_amp_val")
        self.verticalLayout.addWidget(self.Twofold_Ast_amp_val)
        self.Twofold_Ast_amp_slider = QtWidgets.QSlider(self.groupBox_3)
        self.Twofold_Ast_amp_slider.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Twofold_Ast_amp_slider.setInputMethodHints(QtCore.Qt.ImhNone)
        self.Twofold_Ast_amp_slider.setMaximum(100)
        self.Twofold_Ast_amp_slider.setPageStep(1)
        self.Twofold_Ast_amp_slider.setProperty("value", 0)
        self.Twofold_Ast_amp_slider.setOrientation(QtCore.Qt.Horizontal)
        self.Twofold_Ast_amp_slider.setInvertedControls(False)
        self.Twofold_Ast_amp_slider.setTickInterval(1)
        self.Twofold_Ast_amp_slider.setObjectName("Twofold_Ast_amp_slider")
        self.verticalLayout.addWidget(self.Twofold_Ast_amp_slider)
        self.gridLayout_4.addLayout(self.verticalLayout, 1, 1, 1, 1)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.Twofold_Ast_ang_val = QtWidgets.QSpinBox(self.groupBox_3)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Twofold_Ast_ang_val.setFont(font)
        self.Twofold_Ast_ang_val.setMinimum(-100)
        self.Twofold_Ast_ang_val.setMaximum(100)
        self.Twofold_Ast_ang_val.setSingleStep(100)
        self.Twofold_Ast_ang_val.setProperty("value", 0)
        self.Twofold_Ast_ang_val.setDisplayIntegerBase(10)
        self.Twofold_Ast_ang_val.setObjectName("Twofold_Ast_ang_val")
        self.verticalLayout_2.addWidget(self.Twofold_Ast_ang_val)
        self.Twofold_Ast_ang_slider = QtWidgets.QSlider(self.groupBox_3)
        self.Twofold_Ast_ang_slider.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Twofold_Ast_ang_slider.setInputMethodHints(QtCore.Qt.ImhNone)
        self.Twofold_Ast_ang_slider.setMaximum(100)
        self.Twofold_Ast_ang_slider.setPageStep(1)
        self.Twofold_Ast_ang_slider.setProperty("value", 0)
        self.Twofold_Ast_ang_slider.setOrientation(QtCore.Qt.Horizontal)
        self.Twofold_Ast_ang_slider.setInvertedControls(False)
        self.Twofold_Ast_ang_slider.setTickInterval(1)
        self.Twofold_Ast_ang_slider.setObjectName("Twofold_Ast_ang_slider")
        self.verticalLayout_2.addWidget(self.Twofold_Ast_ang_slider)
        self.gridLayout_4.addLayout(self.verticalLayout_2, 1, 2, 1, 1)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.Threefold_Ast_amp_val = QtWidgets.QSpinBox(self.groupBox_3)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Threefold_Ast_amp_val.setFont(font)
        self.Threefold_Ast_amp_val.setMinimum(-100)
        self.Threefold_Ast_amp_val.setMaximum(100)
        self.Threefold_Ast_amp_val.setSingleStep(100)
        self.Threefold_Ast_amp_val.setProperty("value", 0)
        self.Threefold_Ast_amp_val.setDisplayIntegerBase(10)
        self.Threefold_Ast_amp_val.setObjectName("Threefold_Ast_amp_val")
        self.verticalLayout_5.addWidget(self.Threefold_Ast_amp_val)
        self.Threefold_Ast_amp_slider = QtWidgets.QSlider(self.groupBox_3)
        self.Threefold_Ast_amp_slider.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Threefold_Ast_amp_slider.setInputMethodHints(QtCore.Qt.ImhNone)
        self.Threefold_Ast_amp_slider.setMaximum(100)
        self.Threefold_Ast_amp_slider.setPageStep(1)
        self.Threefold_Ast_amp_slider.setProperty("value", 0)
        self.Threefold_Ast_amp_slider.setOrientation(QtCore.Qt.Horizontal)
        self.Threefold_Ast_amp_slider.setInvertedControls(False)
        self.Threefold_Ast_amp_slider.setTickInterval(1)
        self.Threefold_Ast_amp_slider.setObjectName("Threefold_Ast_amp_slider")
        self.verticalLayout_5.addWidget(self.Threefold_Ast_amp_slider)
        self.gridLayout_4.addLayout(self.verticalLayout_5, 2, 1, 1, 1)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.Threefold_Ast_ang_val = QtWidgets.QSpinBox(self.groupBox_3)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Threefold_Ast_ang_val.setFont(font)
        self.Threefold_Ast_ang_val.setMinimum(-100)
        self.Threefold_Ast_ang_val.setMaximum(100)
        self.Threefold_Ast_ang_val.setSingleStep(100)
        self.Threefold_Ast_ang_val.setProperty("value", 0)
        self.Threefold_Ast_ang_val.setDisplayIntegerBase(10)
        self.Threefold_Ast_ang_val.setObjectName("Threefold_Ast_ang_val")
        self.verticalLayout_6.addWidget(self.Threefold_Ast_ang_val)
        self.Threefold_Ast_ang_slider = QtWidgets.QSlider(self.groupBox_3)
        self.Threefold_Ast_ang_slider.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Threefold_Ast_ang_slider.setInputMethodHints(QtCore.Qt.ImhNone)
        self.Threefold_Ast_ang_slider.setMaximum(100)
        self.Threefold_Ast_ang_slider.setPageStep(1)
        self.Threefold_Ast_ang_slider.setProperty("value", 0)
        self.Threefold_Ast_ang_slider.setOrientation(QtCore.Qt.Horizontal)
        self.Threefold_Ast_ang_slider.setInvertedControls(False)
        self.Threefold_Ast_ang_slider.setTickInterval(1)
        self.Threefold_Ast_ang_slider.setObjectName("Threefold_Ast_ang_slider")
        self.verticalLayout_6.addWidget(self.Threefold_Ast_ang_slider)
        self.gridLayout_4.addLayout(self.verticalLayout_6, 2, 2, 1, 1)
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.Coma_amp_val = QtWidgets.QSpinBox(self.groupBox_3)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Coma_amp_val.setFont(font)
        self.Coma_amp_val.setMinimum(-100)
        self.Coma_amp_val.setMaximum(100)
        self.Coma_amp_val.setSingleStep(100)
        self.Coma_amp_val.setProperty("value", 0)
        self.Coma_amp_val.setDisplayIntegerBase(10)
        self.Coma_amp_val.setObjectName("Coma_amp_val")
        self.verticalLayout_7.addWidget(self.Coma_amp_val)
        self.Coma_amp_slider = QtWidgets.QSlider(self.groupBox_3)
        self.Coma_amp_slider.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Coma_amp_slider.setInputMethodHints(QtCore.Qt.ImhNone)
        self.Coma_amp_slider.setMaximum(100)
        self.Coma_amp_slider.setPageStep(1)
        self.Coma_amp_slider.setProperty("value", 0)
        self.Coma_amp_slider.setOrientation(QtCore.Qt.Horizontal)
        self.Coma_amp_slider.setInvertedControls(False)
        self.Coma_amp_slider.setTickInterval(1)
        self.Coma_amp_slider.setObjectName("Coma_amp_slider")
        self.verticalLayout_7.addWidget(self.Coma_amp_slider)
        self.gridLayout_4.addLayout(self.verticalLayout_7, 3, 1, 1, 1)
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.Coma_ang_val = QtWidgets.QSpinBox(self.groupBox_3)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Coma_ang_val.setFont(font)
        self.Coma_ang_val.setMinimum(-100)
        self.Coma_ang_val.setMaximum(100)
        self.Coma_ang_val.setSingleStep(100)
        self.Coma_ang_val.setProperty("value", 0)
        self.Coma_ang_val.setDisplayIntegerBase(10)
        self.Coma_ang_val.setObjectName("Coma_ang_val")
        self.verticalLayout_8.addWidget(self.Coma_ang_val)
        self.Coma_ang_slider = QtWidgets.QSlider(self.groupBox_3)
        self.Coma_ang_slider.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Coma_ang_slider.setInputMethodHints(QtCore.Qt.ImhNone)
        self.Coma_ang_slider.setMaximum(100)
        self.Coma_ang_slider.setPageStep(1)
        self.Coma_ang_slider.setProperty("value", 0)
        self.Coma_ang_slider.setOrientation(QtCore.Qt.Horizontal)
        self.Coma_ang_slider.setInvertedControls(False)
        self.Coma_ang_slider.setTickInterval(1)
        self.Coma_ang_slider.setObjectName("Coma_ang_slider")
        self.verticalLayout_8.addWidget(self.Coma_ang_slider)
        self.gridLayout_4.addLayout(self.verticalLayout_8, 3, 2, 1, 1)
        self.Twofold_Ast_label = QtWidgets.QPushButton(self.groupBox_3)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Twofold_Ast_label.setFont(font)
        self.Twofold_Ast_label.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Twofold_Ast_label.setMouseTracking(False)
        self.Twofold_Ast_label.setFlat(True)
        self.Twofold_Ast_label.setObjectName("Twofold_Ast_label")
        self.gridLayout_4.addWidget(self.Twofold_Ast_label, 1, 0, 1, 1)
        self.Threefold_Ast_label = QtWidgets.QPushButton(self.groupBox_3)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Threefold_Ast_label.setFont(font)
        self.Threefold_Ast_label.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Threefold_Ast_label.setMouseTracking(False)
        self.Threefold_Ast_label.setFlat(True)
        self.Threefold_Ast_label.setObjectName("Threefold_Ast_label")
        self.gridLayout_4.addWidget(self.Threefold_Ast_label, 2, 0, 1, 1)
        self.Coma_label = QtWidgets.QPushButton(self.groupBox_3)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Coma_label.setFont(font)
        self.Coma_label.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Coma_label.setMouseTracking(False)
        self.Coma_label.setFlat(True)
        self.Coma_label.setObjectName("Coma_label")
        self.gridLayout_4.addWidget(self.Coma_label, 3, 0, 1, 1)
        self.groupBox_4 = QtWidgets.QGroupBox(self.frame)
        self.groupBox_4.setGeometry(QtCore.QRect(320, 530, 321, 101))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_4.setFont(font)
        self.groupBox_4.setAlignment(QtCore.Qt.AlignCenter)
        self.groupBox_4.setObjectName("groupBox_4")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.groupBox_4)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.AVib_X_slider = QtWidgets.QSlider(self.groupBox_4)
        self.AVib_X_slider.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.AVib_X_slider.setInputMethodHints(QtCore.Qt.ImhNone)
        self.AVib_X_slider.setMaximum(100)
        self.AVib_X_slider.setPageStep(1)
        self.AVib_X_slider.setProperty("value", 0)
        self.AVib_X_slider.setOrientation(QtCore.Qt.Horizontal)
        self.AVib_X_slider.setInvertedControls(False)
        self.AVib_X_slider.setTickInterval(1)
        self.AVib_X_slider.setObjectName("AVib_X_slider")
        self.gridLayout_5.addWidget(self.AVib_X_slider, 0, 1, 1, 1)
        self.AVib_X_val = QtWidgets.QSpinBox(self.groupBox_4)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.AVib_X_val.setFont(font)
        self.AVib_X_val.setMinimum(-100)
        self.AVib_X_val.setMaximum(100)
        self.AVib_X_val.setSingleStep(100)
        self.AVib_X_val.setProperty("value", 0)
        self.AVib_X_val.setDisplayIntegerBase(10)
        self.AVib_X_val.setObjectName("AVib_X_val")
        self.gridLayout_5.addWidget(self.AVib_X_val, 0, 2, 1, 1)
        self.AVib_Y_val = QtWidgets.QSpinBox(self.groupBox_4)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.AVib_Y_val.setFont(font)
        self.AVib_Y_val.setMinimum(-100)
        self.AVib_Y_val.setMaximum(100)
        self.AVib_Y_val.setSingleStep(100)
        self.AVib_Y_val.setProperty("value", 0)
        self.AVib_Y_val.setDisplayIntegerBase(10)
        self.AVib_Y_val.setObjectName("AVib_Y_val")
        self.gridLayout_5.addWidget(self.AVib_Y_val, 2, 2, 1, 1)
        self.AVib_Y_slider = QtWidgets.QSlider(self.groupBox_4)
        self.AVib_Y_slider.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.AVib_Y_slider.setMinimum(0)
        self.AVib_Y_slider.setMaximum(100)
        self.AVib_Y_slider.setOrientation(QtCore.Qt.Horizontal)
        self.AVib_Y_slider.setInvertedControls(False)
        self.AVib_Y_slider.setTickInterval(1)
        self.AVib_Y_slider.setObjectName("AVib_Y_slider")
        self.gridLayout_5.addWidget(self.AVib_Y_slider, 2, 1, 1, 1)
        self.Avib_X_label = QtWidgets.QPushButton(self.groupBox_4)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Avib_X_label.setFont(font)
        self.Avib_X_label.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Avib_X_label.setMouseTracking(False)
        self.Avib_X_label.setFlat(True)
        self.Avib_X_label.setObjectName("Avib_X_label")
        self.gridLayout_5.addWidget(self.Avib_X_label, 0, 0, 1, 1)
        self.Avib_Y_label = QtWidgets.QPushButton(self.groupBox_4)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Avib_Y_label.setFont(font)
        self.Avib_Y_label.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Avib_Y_label.setMouseTracking(False)
        self.Avib_Y_label.setFlat(True)
        self.Avib_Y_label.setObjectName("Avib_Y_label")
        self.gridLayout_5.addWidget(self.Avib_Y_label, 2, 0, 1, 1)
        self.groupBox_5 = QtWidgets.QGroupBox(self.frame)
        self.groupBox_5.setGeometry(QtCore.QRect(10, 606, 301, 141))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_5.sizePolicy().hasHeightForWidth())
        self.groupBox_5.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.groupBox_5.setFont(font)
        self.groupBox_5.setTabletTracking(False)
        self.groupBox_5.setAlignment(QtCore.Qt.AlignCenter)
        self.groupBox_5.setFlat(False)
        self.groupBox_5.setObjectName("groupBox_5")
        self.label_28 = QtWidgets.QLabel(self.groupBox_5)
        self.label_28.setGeometry(QtCore.QRect(127, 14, 61, 20))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.label_28.setFont(font)
        self.label_28.setAlignment(QtCore.Qt.AlignCenter)
        self.label_28.setObjectName("label_28")
        self.label_34 = QtWidgets.QLabel(self.groupBox_5)
        self.label_34.setGeometry(QtCore.QRect(184, 14, 61, 20))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.label_34.setFont(font)
        self.label_34.setAlignment(QtCore.Qt.AlignCenter)
        self.label_34.setObjectName("label_34")
        self.label_35 = QtWidgets.QLabel(self.groupBox_5)
        self.label_35.setGeometry(QtCore.QRect(243, 14, 61, 20))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.label_35.setFont(font)
        self.label_35.setAlignment(QtCore.Qt.AlignCenter)
        self.label_35.setObjectName("label_35")
        self.DTmap_generate = QtWidgets.QPushButton(self.groupBox_5)
        self.DTmap_generate.setEnabled(True)
        self.DTmap_generate.setGeometry(QtCore.QRect(70, 110, 161, 23))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.DTmap_generate.setFont(font)
        self.DTmap_generate.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.DTmap_generate.setAutoFillBackground(False)
        self.DTmap_generate.setCheckable(False)
        self.DTmap_generate.setAutoDefault(False)
        self.DTmap_generate.setDefault(False)
        self.DTmap_generate.setFlat(False)
        self.DTmap_generate.setObjectName("DTmap_generate")
        self.splitter_2 = QtWidgets.QSplitter(self.groupBox_5)
        self.splitter_2.setGeometry(QtCore.QRect(129, 39, 161, 51))
        self.splitter_2.setOrientation(QtCore.Qt.Vertical)
        self.splitter_2.setObjectName("splitter_2")
        self.layoutWidget = QtWidgets.QWidget(self.splitter_2)
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.Def_start = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Def_start.setFont(font)
        self.Def_start.setAlignment(QtCore.Qt.AlignCenter)
        self.Def_start.setObjectName("Def_start")
        self.horizontalLayout_2.addWidget(self.Def_start)
        self.Def_num = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Def_num.setFont(font)
        self.Def_num.setAlignment(QtCore.Qt.AlignCenter)
        self.Def_num.setObjectName("Def_num")
        self.horizontalLayout_2.addWidget(self.Def_num)
        self.Def_step = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Def_step.setFont(font)
        self.Def_step.setAlignment(QtCore.Qt.AlignCenter)
        self.Def_step.setObjectName("Def_step")
        self.horizontalLayout_2.addWidget(self.Def_step)
        self.layoutWidget1 = QtWidgets.QWidget(self.splitter_2)
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.layoutWidget1)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.Thick_start = QtWidgets.QLineEdit(self.layoutWidget1)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Thick_start.setFont(font)
        self.Thick_start.setAlignment(QtCore.Qt.AlignCenter)
        self.Thick_start.setObjectName("Thick_start")
        self.horizontalLayout_3.addWidget(self.Thick_start)
        self.Thick_num = QtWidgets.QLineEdit(self.layoutWidget1)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Thick_num.setFont(font)
        self.Thick_num.setAlignment(QtCore.Qt.AlignCenter)
        self.Thick_num.setObjectName("Thick_num")
        self.horizontalLayout_3.addWidget(self.Thick_num)
        self.Thick_step = QtWidgets.QLineEdit(self.layoutWidget1)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Thick_step.setFont(font)
        self.Thick_step.setAlignment(QtCore.Qt.AlignCenter)
        self.Thick_step.setObjectName("Thick_step")
        self.horizontalLayout_3.addWidget(self.Thick_step)
        self.DT_def_label = QtWidgets.QPushButton(self.groupBox_5)
        self.DT_def_label.setGeometry(QtCore.QRect(44, 40, 81, 23))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.DT_def_label.setFont(font)
        self.DT_def_label.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.DT_def_label.setMouseTracking(False)
        self.DT_def_label.setFlat(True)
        self.DT_def_label.setObjectName("DT_def_label")
        self.DT_thick_label = QtWidgets.QPushButton(self.groupBox_5)
        self.DT_thick_label.setGeometry(QtCore.QRect(11, 66, 114, 23))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.DT_thick_label.setFont(font)
        self.DT_thick_label.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.DT_thick_label.setMouseTracking(False)
        self.DT_thick_label.setFlat(True)
        self.DT_thick_label.setObjectName("DT_thick_label")
        self.tabWidget = QtWidgets.QTabWidget(self.frame)
        self.tabWidget.setGeometry(QtCore.QRect(660, 16, 541, 801))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.tabWidget.setFont(font)
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.tabWidget.setObjectName("tabWidget")
        self.Alignment_tab = QtWidgets.QWidget()
        self.Alignment_tab.setObjectName("Alignment_tab")
        self.frame_3 = QtWidgets.QFrame(self.Alignment_tab)
        self.frame_3.setGeometry(QtCore.QRect(10, 10, 511, 71))
        self.frame_3.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.frame_3)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.Filename_lable = QtWidgets.QLabel(self.frame_3)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Filename_lable.setFont(font)
        self.Filename_lable.setObjectName("Filename_lable")
        self.horizontalLayout_4.addWidget(self.Filename_lable)
        self.Filename_text = QtWidgets.QLineEdit(self.frame_3)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Filename_text.setFont(font)
        self.Filename_text.setObjectName("Filename_text")
        self.horizontalLayout_4.addWidget(self.Filename_text)
        self.Browser = QtWidgets.QPushButton(self.frame_3)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Browser.setFont(font)
        self.Browser.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Browser.setFlat(False)
        self.Browser.setObjectName("Browser")
        self.horizontalLayout_4.addWidget(self.Browser)
        self.Exp_image = QtWidgets.QLabel(self.Alignment_tab)
        self.Exp_image.setGeometry(QtCore.QRect(10, 100, 512, 512))
        self.Exp_image.setMouseTracking(False)
        self.Exp_image.setFrameShape(QtWidgets.QFrame.Box)
        self.Exp_image.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Exp_image.setLineWidth(3)
        self.Exp_image.setMidLineWidth(0)
        self.Exp_image.setText("")
        self.Exp_image.setPixmap(QtGui.QPixmap("big.png"))
        self.Exp_image.setScaledContents(True)
        self.Exp_image.setObjectName("Exp_image")
        self.Transform_overlayed_sim									
        self.XCC_label = QtWidgets.QLabel(self.Alignment_tab)
        self.XCC_label.setGeometry(QtCore.QRect(160, 628, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.XCC_label.setFont(font)
        self.XCC_label.setObjectName("XCC_label")
        self.Exp_label = QtWidgets.QLabel(self.Alignment_tab)
        self.Exp_label.setGeometry(QtCore.QRect(25, 740, 91, 20))
        self.Exp_label.setScaledContents(False)
        self.Exp_label.setAlignment(QtCore.Qt.AlignCenter)
        self.Exp_label.setWordWrap(False)
        self.Exp_label.setObjectName("Exp_label")
        self.Sim_label = QtWidgets.QLabel(self.Alignment_tab)
        self.Sim_label.setGeometry(QtCore.QRect(416, 740, 91, 20))
        self.Sim_label.setScaledContents(False)
        self.Sim_label.setAlignment(QtCore.Qt.AlignCenter)
        self.Sim_label.setWordWrap(False)
        self.Sim_label.setObjectName("Sim_label")
        self.small_Exp_image = QtWidgets.QLabel(self.Alignment_tab)
        self.small_Exp_image.setGeometry(QtCore.QRect(10, 620, 124, 124))
        self.small_Exp_image.setFrameShape(QtWidgets.QFrame.Box)
        self.small_Exp_image.setFrameShadow(QtWidgets.QFrame.Raised)
        self.small_Exp_image.setLineWidth(3)
        self.small_Exp_image.setText("")
        self.small_Exp_image.setPixmap(QtGui.QPixmap("temp.png"))
        self.small_Exp_image.setScaledContents(True)
        self.small_Exp_image.setObjectName("small_Exp_image")
        self.small_Sim_image = QtWidgets.QLabel(self.Alignment_tab)
        self.small_Sim_image.setGeometry(QtCore.QRect(401, 620, 124, 124))
        self.small_Sim_image.setFrameShape(QtWidgets.QFrame.Box)
        self.small_Sim_image.setFrameShadow(QtWidgets.QFrame.Raised)
        self.small_Sim_image.setLineWidth(3)
        self.small_Sim_image.setText("")
        self.small_Sim_image.setScaledContents(True)
        self.small_Sim_image.setPixmap(QtGui.QPixmap("muSTEM_ATOMSK\sim.png"))
        self.small_Sim_image.setObjectName("small_Sim_image")
        self.XCC_score = QtWidgets.QLabel(self.Alignment_tab)
        self.XCC_score.setGeometry(QtCore.QRect(280, 624, 91, 41))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.XCC_score.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.XCC_score.setFont(font)
        self.XCC_score.setAutoFillBackground(True)
        self.XCC_score.setFrameShape(QtWidgets.QFrame.Box)
        self.XCC_score.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.XCC_score.setLineWidth(3)
        self.XCC_score.setScaledContents(False)
        self.XCC_score.setAlignment(QtCore.Qt.AlignCenter)
        self.XCC_score.setObjectName("XCC_score")
        self.splitter_3 = QtWidgets.QSplitter(self.Alignment_tab)
        self.splitter_3.setGeometry(QtCore.QRect(150, 680, 221, 23))
        self.splitter_3.setOrientation(QtCore.Qt.Horizontal)
        self.splitter_3.setObjectName("splitter_3")
        self.colormap_label_2 = QtWidgets.QPushButton(self.splitter_3)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.colormap_label_2.setFont(font)
        self.colormap_label_2.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.colormap_label_2.setFlat(True)
        self.colormap_label_2.setObjectName("colormap_label_2")
        self.colormap_combo_2 = QtWidgets.QComboBox(self.splitter_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.colormap_combo_2.sizePolicy().hasHeightForWidth())
        self.colormap_combo_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.colormap_combo_2.setFont(font)
        self.colormap_combo_2.setObjectName("colormap_combo_2")
        self.colormap_combo_2.addItem("")
        self.colormap_combo_2.addItem("")
        self.colormap_combo_2.addItem("")
        self.colormap_combo_2.addItem("")
        self.colormap_combo_2.addItem("")
        self.colormap_combo_2.addItem("")
        self.tabWidget.addTab(self.Alignment_tab, "")
        self.DTmap_tab = QtWidgets.QWidget()
        self.DTmap_tab.setObjectName("DTmap_tab")
        self.pushButton = QtWidgets.QPushButton(self.DTmap_tab)
        self.pushButton.setGeometry(QtCore.QRect(30, 40, 75, 23))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.label = QtWidgets.QLabel(self.DTmap_tab)
        self.label.setGeometry(QtCore.QRect(130, 40, 47, 13))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.DTmap_pix = QtWidgets.QLabel(self.DTmap_tab)
        self.DTmap_pix.setGeometry(QtCore.QRect(10, 100, 512, 512))
        self.DTmap_pix.setFrameShape(QtWidgets.QFrame.Box)
        self.DTmap_pix.setFrameShadow(QtWidgets.QFrame.Raised)
        self.DTmap_pix.setLineWidth(3)
        self.DTmap_pix.setText("")
        self.DTmap_pix.setPixmap(QtGui.QPixmap("sim.png"))
        self.DTmap_pix.setScaledContents(True)
        self.DTmap_pix.setObjectName("DTmap_pix")
        self.tabWidget.addTab(self.DTmap_tab, "")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.tabWidget.addTab(self.tab, "")
        self.groupBox_6 = QtWidgets.QGroupBox(self.frame)
        self.groupBox_6.setGeometry(QtCore.QRect(10, 535, 301, 62))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_6.setFont(font)
        self.groupBox_6.setAlignment(QtCore.Qt.AlignCenter)
        self.groupBox_6.setFlat(False)
        self.groupBox_6.setObjectName("groupBox_6")
        self.splitter = QtWidgets.QSplitter(self.groupBox_6)
        self.splitter.setGeometry(QtCore.QRect(77, 28, 112, 22))
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        self.X_resolution = QtWidgets.QComboBox(self.splitter)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.X_resolution.sizePolicy().hasHeightForWidth())
        self.X_resolution.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.X_resolution.setFont(font)
        self.X_resolution.setEditable(False)
        self.X_resolution.setObjectName("X_resolution")
        self.X_resolution.addItem("")
        self.X_resolution.addItem("")
        self.X_resolution.addItem("")
        self.X_2 = QtWidgets.QLabel(self.splitter)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.X_2.sizePolicy().hasHeightForWidth())
        self.X_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.X_2.setFont(font)
        self.X_2.setObjectName("X_2")
        self.Y_resolution = QtWidgets.QComboBox(self.splitter)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Y_resolution.sizePolicy().hasHeightForWidth())
        self.Y_resolution.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.Y_resolution.setFont(font)
        self.Y_resolution.setEditable(False)
        self.Y_resolution.setObjectName("Y_resolution")
        self.Y_resolution.addItem("")
        self.Y_resolution.addItem("")
        self.Y_resolution.addItem("")
        self.horizontalLayout.addWidget(self.frame)
        mainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(mainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1264, 21))
        self.menubar.setObjectName("menubar")
        mainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(mainWindow)
        self.statusbar.setObjectName("statusbar")
        mainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(mainWindow)
        self.colormap_combo.setCurrentIndex(0)
        self.tabWidget.setCurrentIndex(0)
        self.colormap_combo_2.setCurrentIndex(0)
        self.X_resolution.setCurrentIndex(1)
        self.Y_resolution.setCurrentIndex(1)
        self.X_slider.valueChanged['int'].connect(self.X_val.setValue)
        self.X_slider.valueChanged['int'].connect(self.Transform_overlayed_sim)
        self.X_val.valueChanged['int'].connect(self.X_slider.setValue)
        self.Y_slider.valueChanged['int'].connect(self.Y_val.setValue)
        self.Y_slider.valueChanged['int'].connect(self.Transform_overlayed_sim)
        self.Y_val.valueChanged['int'].connect(self.Y_slider.setValue)
        self.Rot_slider.valueChanged['int'].connect(self.Rot_val.setValue)
        self.Rot_slider.valueChanged['int'].connect(self.Transform_overlayed_sim)
        self.Rot_val.valueChanged['int'].connect(self.Rot_slider.setValue)
        self.Rot_val.valueChanged['int'].connect(self.Transform_overlayed_sim)
        self.Dup_slider.valueChanged['int'].connect(self.Duplicate_val.setValue)
        self.Duplicate_val.valueChanged['int'].connect(self.Dup_slider.setValue)
        self.Duplicate_val.setKeyboardTracking(False)
        self.Duplicate_val.valueChanged['int'].connect(self.muSTEM_Input_file)
#        self.Dup_slider.sliderReleased.connect(self.muSTEM_Input_file)

        self.FocSpread_slider.valueChanged['int'].connect(self.Delta.setValue)
        self.Delta.valueChanged['int'].connect(self.FocSpread_slider.setValue)
        self.Def_slider.valueChanged['int'].connect(self.Def_val.setValue)
        self.Def_val.valueChanged['int'].connect(self.Def_slider.setValue)
        self.Def_val.setKeyboardTracking(False)
        self.Def_val.editingFinished.connect(self.muSTEM_Input_file)
        self.Def_slider.sliderReleased.connect(self.muSTEM_Input_file)

        self.Thick_slider.valueChanged['int'].connect(self.Thick_val.setValue)
        self.Thick_val.valueChanged['int'].connect(self.Thick_slider.setValue)
        self.Thick_val.editingFinished.connect(self.muSTEM_Input_file)
        self.Thick_slider.sliderReleased.connect(self.muSTEM_Input_file)

        self.Twofold_Ast_amp_val.valueChanged['int'].connect(self.Twofold_Ast_amp_slider.setValue)
        self.Twofold_Ast_amp_slider.valueChanged['int'].connect(self.Twofold_Ast_amp_val.setValue)
        self.Twofold_Ast_ang_val.valueChanged['int'].connect(self.Twofold_Ast_ang_slider.setValue)
        self.Twofold_Ast_ang_slider.valueChanged['int'].connect(self.Twofold_Ast_ang_val.setValue)
        self.accelV_slider.valueChanged['int'].connect(self.accelV.setValue)
        self.accelV.valueChanged['int'].connect(self.accelV_slider.setValue)
        self.accelV.setKeyboardTracking(False)
        self.accelV.editingFinished.connect(self.ATOMSK_create_crystal)
        self.accelV_slider.sliderReleased.connect(self.ATOMSK_create_crystal)
        self.Threefold_Ast_amp_slider.valueChanged['int'].connect(self.Threefold_Ast_amp_val.setValue)
        self.Threefold_Ast_amp_val.valueChanged['int'].connect(self.Threefold_Ast_amp_slider.setValue)
        self.Threefold_Ast_ang_slider.valueChanged['int'].connect(self.Threefold_Ast_ang_val.setValue)
        self.Threefold_Ast_ang_val.valueChanged['int'].connect(self.Threefold_Ast_ang_slider.setValue)
        self.Coma_amp_slider.valueChanged['int'].connect(self.Coma_amp_val.setValue)
        self.Coma_amp_val.valueChanged['int'].connect(self.Coma_amp_slider.setValue)
        self.Coma_ang_slider.valueChanged['int'].connect(self.Coma_ang_val.setValue)
        self.Coma_ang_val.valueChanged['int'].connect(self.Coma_ang_slider.setValue)
        self.AVib_X_slider.valueChanged['int'].connect(self.AVib_X_val.setValue)
        self.AVib_X_val.valueChanged['int'].connect(self.AVib_X_slider.setValue)
        self.AVib_Y_slider.valueChanged['int'].connect(self.AVib_Y_val.setValue)
        self.AVib_Y_val.valueChanged['int'].connect(self.AVib_Y_slider.setValue)
        self.X_resolution.currentIndexChanged['int'].connect(self.Y_resolution.setCurrentIndex)
        self.Y_resolution.currentIndexChanged['int'].connect(self.X_resolution.setCurrentIndex)
        self.Mag_slider.valueChanged['int'].connect(self.Mag_convert_slider)
        self.Mag_slider.valueChanged['int'].connect(self.Transform_overlayed_sim)
        self.Mag_val.valueChanged['double'].connect(self.Mag_convert_val)
        self.Transparency_slider.valueChanged['int'].connect(self.Trans_convert_slider)
        self.Transparency_slider.valueChanged['int'].connect(self.Transform_overlayed_sim)
        self.Ttransp_val.valueChanged['double'].connect(self.Trans_convert_val)
        self.Cs_slider.valueChanged['int'].connect(self.Cs_convert_slider)
        self.Cs_val.valueChanged['double'].connect(self.Cs_convert_val)
        self.Cs_val.editingFinished.connect(self.muSTEM_Input_file)
        self.Cs_slider.sliderReleased.connect(self.muSTEM_Input_file)
        self.Aperture_slider.valueChanged['int'].connect(self.Aperture_convert_slider)
        self.Aperture_val.valueChanged['double'].connect(self.Aperture_convert_val)
        self.Conv_slider.valueChanged['int'].connect(self.Conv_convert_slider)
        self.ConvAngle.valueChanged['double'].connect(self.Conv_convert_val)

        QtCore.QMetaObject.connectSlotsByName(mainWindow)
        mainWindow.setTabOrder(self.CIF_filename, self.browse_cif)
        mainWindow.setTabOrder(self.browse_cif, self.Box_Xaxis_label)
        mainWindow.setTabOrder(self.Box_Xaxis_label, self.new_X_axis)
        mainWindow.setTabOrder(self.new_X_axis, self.Box_Yaxis_label)
        mainWindow.setTabOrder(self.Box_Yaxis_label, self.new_Y_axis)
        mainWindow.setTabOrder(self.new_Y_axis, self.Box_Zaxis_label)
        mainWindow.setTabOrder(self.Box_Zaxis_label, self.new_Z_axis)
        mainWindow.setTabOrder(self.new_Z_axis, self.AcclV_label)
        mainWindow.setTabOrder(self.AcclV_label, self.accelV_slider)
        mainWindow.setTabOrder(self.accelV_slider, self.accelV)
        mainWindow.setTabOrder(self.accelV, self.colormap_label)
        mainWindow.setTabOrder(self.colormap_label, self.colormap_combo)
        mainWindow.setTabOrder(self.colormap_combo, self.Trans_label)
        mainWindow.setTabOrder(self.Trans_label, self.Transparency_slider)
        mainWindow.setTabOrder(self.Transparency_slider, self.Ttransp_val)
        mainWindow.setTabOrder(self.Ttransp_val, self.Shift_X_label)
        mainWindow.setTabOrder(self.Shift_X_label, self.X_slider)
        mainWindow.setTabOrder(self.X_slider, self.X_val)
        mainWindow.setTabOrder(self.X_val, self.Shift_Y_label)
        mainWindow.setTabOrder(self.Shift_Y_label, self.Y_slider)
        mainWindow.setTabOrder(self.Y_slider, self.Y_val)
        mainWindow.setTabOrder(self.Y_val, self.Rot_label)
        mainWindow.setTabOrder(self.Rot_label, self.Rot_slider)
        mainWindow.setTabOrder(self.Rot_slider, self.Rot_val)
        mainWindow.setTabOrder(self.Rot_val, self.Mag_label)
        mainWindow.setTabOrder(self.Mag_label, self.Mag_slider)
        mainWindow.setTabOrder(self.Mag_slider, self.Mag_val)
        mainWindow.setTabOrder(self.Mag_val, self.X_resolution)
        mainWindow.setTabOrder(self.X_resolution, self.Y_resolution)
        mainWindow.setTabOrder(self.Y_resolution, self.DT_def_label)
        mainWindow.setTabOrder(self.DT_def_label, self.Def_start)
        mainWindow.setTabOrder(self.Def_start, self.Def_num)
        mainWindow.setTabOrder(self.Def_num, self.Def_step)
        mainWindow.setTabOrder(self.Def_step, self.DT_thick_label)
        mainWindow.setTabOrder(self.DT_thick_label, self.Thick_start)
        mainWindow.setTabOrder(self.Thick_start, self.Thick_num)
        mainWindow.setTabOrder(self.Thick_num, self.Thick_step)
        mainWindow.setTabOrder(self.Thick_step, self.DTmap_generate)
        mainWindow.setTabOrder(self.DTmap_generate, self.Dup_label)
        mainWindow.setTabOrder(self.Dup_label, self.Dup_slider)
        mainWindow.setTabOrder(self.Dup_slider, self.Duplicate_val)
        mainWindow.setTabOrder(self.Duplicate_val, self.Aperture_size_label)
        mainWindow.setTabOrder(self.Aperture_size_label, self.Aperture_slider)
        mainWindow.setTabOrder(self.Aperture_slider, self.Aperture_val)
        mainWindow.setTabOrder(self.Aperture_val, self.Cs_label)
        mainWindow.setTabOrder(self.Cs_label, self.Cs_slider)
        mainWindow.setTabOrder(self.Cs_slider, self.Cs_val)
        mainWindow.setTabOrder(self.Cs_val, self.Focal_label)
        mainWindow.setTabOrder(self.Focal_label, self.FocSpread_slider)
        mainWindow.setTabOrder(self.FocSpread_slider, self.Delta)
        mainWindow.setTabOrder(self.Delta, self.Conv_label)
        mainWindow.setTabOrder(self.Conv_label, self.Conv_slider)
        mainWindow.setTabOrder(self.Conv_slider, self.ConvAngle)
        mainWindow.setTabOrder(self.ConvAngle, self.Def_label)
        mainWindow.setTabOrder(self.Def_label, self.Def_slider)
        mainWindow.setTabOrder(self.Def_slider, self.Def_val)
        mainWindow.setTabOrder(self.Def_val, self.Thick_label)
        mainWindow.setTabOrder(self.Thick_label, self.Thick_slider)
        mainWindow.setTabOrder(self.Thick_slider, self.Thick_val)
        mainWindow.setTabOrder(self.Thick_val, self.Twofold_Ast_label)
        mainWindow.setTabOrder(self.Twofold_Ast_label, self.Twofold_Ast_amp_val)
        mainWindow.setTabOrder(self.Twofold_Ast_amp_val, self.Twofold_Ast_ang_val)
        mainWindow.setTabOrder(self.Twofold_Ast_ang_val, self.Twofold_Ast_amp_slider)
        mainWindow.setTabOrder(self.Twofold_Ast_amp_slider, self.Twofold_Ast_ang_slider)
        mainWindow.setTabOrder(self.Twofold_Ast_ang_slider, self.Threefold_Ast_label)
        mainWindow.setTabOrder(self.Threefold_Ast_label, self.Threefold_Ast_amp_val)
        mainWindow.setTabOrder(self.Threefold_Ast_amp_val, self.Threefold_Ast_ang_val)
        mainWindow.setTabOrder(self.Threefold_Ast_ang_val, self.Threefold_Ast_amp_slider)
        mainWindow.setTabOrder(self.Threefold_Ast_amp_slider, self.Threefold_Ast_ang_slider)
        mainWindow.setTabOrder(self.Threefold_Ast_ang_slider, self.Coma_label)
        mainWindow.setTabOrder(self.Coma_label, self.Coma_amp_val)
        mainWindow.setTabOrder(self.Coma_amp_val, self.Coma_ang_val)
        mainWindow.setTabOrder(self.Coma_ang_val, self.Coma_amp_slider)
        mainWindow.setTabOrder(self.Coma_amp_slider, self.Coma_ang_slider)
        mainWindow.setTabOrder(self.Coma_ang_slider, self.Avib_X_label)
        mainWindow.setTabOrder(self.Avib_X_label, self.AVib_X_slider)
        mainWindow.setTabOrder(self.AVib_X_slider, self.AVib_X_val)
        mainWindow.setTabOrder(self.AVib_X_val, self.Avib_Y_label)
        mainWindow.setTabOrder(self.Avib_Y_label, self.AVib_Y_slider)
        mainWindow.setTabOrder(self.AVib_Y_slider, self.AVib_Y_val)
        mainWindow.setTabOrder(self.AVib_Y_val, self.tabWidget)
        mainWindow.setTabOrder(self.tabWidget, self.Filename_text)
        mainWindow.setTabOrder(self.Filename_text, self.Browser)
        mainWindow.setTabOrder(self.Browser, self.pushButton)

        self.Browser.clicked.connect(self.open_Exp_dialog_box)           #             connect a method to click event
        self.browse_cif.clicked.connect(self.open_CIF_dialog_box)
        self.Mag_label.clicked.connect(self.Mag_val_default)
        self.Rot_label.clicked.connect(self.Rot_val_default)
        self.Shift_X_label.clicked.connect(self.ShiftX_val_default)
        self.Shift_Y_label.clicked.connect(self.ShiftY_val_default)
        self.Trans_label.clicked.connect(self.Trans_val_default)
        self.AcclV_label.clicked.connect(self.AcclV_val_default)
        self.Dup_label.clicked.connect(self.Duplicate_val_default)
        self.Cs_label.clicked.connect(self.Cs_val_default)
        self.Def_label.clicked.connect(self.Def_val_default)
        self.Aperture_size_label.clicked.connect(self.Aperture_val_default)
        self.Thick_label.clicked.connect(self.Thick_val_default)


    def retranslateUi(self, mainWindow):
        _translate = QtCore.QCoreApplication.translate
        mainWindow.setWindowTitle(_translate("mainWindow", "HREM-DIMA / High Resolurion Electron Microscopy - Digital Image Matching Analysis"))
        self.BuildCrystal.setToolTip(_translate("mainWindow", "<html><head/><body><p>Can use any format acceptable by ATOMSK (https://atomsk.univ-lille.fr/) </p></body></html>"))
        self.BuildCrystal.setWhatsThis(_translate("mainWindow", "<html><head/><body><p>test</p></body></html>"))
        self.BuildCrystal.setTitle(_translate("mainWindow", "Build Crystal (ATOMSK)"))
        self.Box_Yaxis_label.setText(_translate("mainWindow", "[0 1 0]    ==>"))
        self.AcclV_label.setText(_translate("mainWindow", "Accel. Voltage [KeV] :"))
        self.browse_cif.setText(_translate("mainWindow", "Browse"))
        self.new_Z_axis.setText(_translate("mainWindow", "[110]"))
        self.new_Z_axis.setPlaceholderText(_translate("mainWindow", "[110]"))
        self.Filename_cryst.setText(_translate("mainWindow", "File Name :"))
        self.CIF_filename.setText(_translate("mainWindow", "GaAs"))
        self.CIF_filename.setPlaceholderText(_translate("mainWindow", "File Name"))
        self.new_Y_axis.setText(_translate("mainWindow", "[-110]"))
        self.new_Y_axis.setPlaceholderText(_translate("mainWindow", "[-110]"))
        self.new_X_axis.setText(_translate("mainWindow", "[001]"))
        self.new_X_axis.setPlaceholderText(_translate("mainWindow", "[001]"))
        self.cif_lable.setText(_translate("mainWindow", ".CIF"))
        self.ZA.setText(_translate("mainWindow", "= Z.A."))
        self.Box_Xaxis_label.setText(_translate("mainWindow", "[1 0 0]    ==>"))
        self.Box_Zaxis_label.setText(_translate("mainWindow", "[0 0 1]    ==>"))
        self.groupBox.setTitle(_translate("mainWindow", "Image Alignment"))
        self.colormap_combo.setItemText(0, _translate("mainWindow", "gray"))
        self.colormap_combo.setItemText(1, _translate("mainWindow", "hot"))
        self.colormap_combo.setItemText(2, _translate("mainWindow", "hsv"))
        self.Mag_label.setText(_translate("mainWindow", "Magnification :"))
        self.Rot_label.setText(_translate("mainWindow", "Rotation :"))
        self.Shift_Y_label.setText(_translate("mainWindow", "Shift Y :"))
        self.Shift_X_label.setText(_translate("mainWindow", "Shift X :"))
        self.Trans_label.setText(_translate("mainWindow", "Transparency :"))
        self.colormap_label.setText(_translate("mainWindow", "Color Map :"))
        self.groupBox_2.setTitle(_translate("mainWindow", "Imaging Parameters"))
        self.Dup_label.setText(_translate("mainWindow", "Image duplication :"))
        self.Aperture_size_label.setText(_translate("mainWindow", "Aperture size [1/nm] :"))
        self.Cs_label.setText(_translate("mainWindow", "Cs [mm] :"))
        self.Focal_label.setText(_translate("mainWindow", "Focal spread [nm] :"))
        self.Conv_label.setText(_translate("mainWindow", "Conv. Angle [mrad] :"))
        self.Def_label.setText(_translate("mainWindow", "Defocus [nm] :"))
        self.Thick_label.setText(_translate("mainWindow", "Thickness [A] :"))
        self.Aberration_amp.setText(_translate("mainWindow", "Amplitude [nm]"))
        self.Aberration_ang.setText(_translate("mainWindow", "Angle [deg]"))
        self.Twofold_Ast_label.setText(_translate("mainWindow", "2-fold Astigmatism :"))
        self.Threefold_Ast_label.setText(_translate("mainWindow", "3-fold Astigmatism :"))
        self.Coma_label.setText(_translate("mainWindow", "Coma :"))
        self.groupBox_4.setTitle(_translate("mainWindow", "Atomic Vibrations"))
        self.Avib_X_label.setText(_translate("mainWindow", "X Amp. [nm] :"))
        self.Avib_Y_label.setText(_translate("mainWindow", "Y Amp. [nm] :"))
        self.groupBox_5.setTitle(_translate("mainWindow", "Defocus-Thickness Map"))
        self.label_28.setText(_translate("mainWindow", "Start"))
        self.label_34.setText(_translate("mainWindow", "#"))
        self.label_35.setText(_translate("mainWindow", "Step"))
        self.DTmap_generate.setText(_translate("mainWindow", "Def-Thick MAP"))
        self.Def_start.setText(_translate("mainWindow", "-20"))
        self.Def_num.setText(_translate("mainWindow", "20"))
        self.Def_step.setText(_translate("mainWindow", "2"))
        self.Thick_start.setText(_translate("mainWindow", "1"))
        self.Thick_num.setText(_translate("mainWindow", "10"))
        self.Thick_step.setText(_translate("mainWindow", "1"))
        self.DT_def_label.setText(_translate("mainWindow", "Defocus [nm] :"))
        self.DT_thick_label.setText(_translate("mainWindow", "Thickness [unit cells] :"))
        self.Filename_lable.setText(_translate("mainWindow", "File Name"))
        self.Filename_text.setText(_translate("mainWindow", "Experimental.png"))
        self.Browser.setText(_translate("mainWindow", "Browse"))
        self.XCC_label.setText(_translate("mainWindow", "Matching Score :"))
        self.Exp_label.setText(_translate("mainWindow", "Experimental"))
        self.Sim_label.setText(_translate("mainWindow", "Simulated"))
        self.XCC_score.setText(_translate("mainWindow", "1.00"))
        self.colormap_label_2.setText(_translate("mainWindow", "Matching Parameter :"))
        self.colormap_combo_2.setItemText(0, _translate("mainWindow", "uqi"))
        self.colormap_combo_2.setItemText(1, _translate("mainWindow", "mse"))
        self.colormap_combo_2.setItemText(2, _translate("mainWindow", "rmse"))
        self.colormap_combo_2.setItemText(3, _translate("mainWindow", "psnr"))
        self.colormap_combo_2.setItemText(4, _translate("mainWindow", "rmse"))
        self.colormap_combo_2.setItemText(5, _translate("mainWindow", "sw "))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Alignment_tab), _translate("mainWindow", "Alignment Panel"))
        self.pushButton.setText(_translate("mainWindow", "PushButton"))
        self.label.setText(_translate("mainWindow", "TextLabel"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.DTmap_tab), _translate("mainWindow", "Def-Thick Map"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("mainWindow", "Page"))
        self.groupBox_6.setTitle(_translate("mainWindow", "Simulated Micrograph Resolution"))
        self.X_resolution.setCurrentText(_translate("mainWindow", "128"))
        self.X_resolution.setItemText(0, _translate("mainWindow", "64"))
        self.X_resolution.setItemText(1, _translate("mainWindow", "128"))
        self.X_resolution.setItemText(2, _translate("mainWindow", "256"))
        self.X_2.setText(_translate("mainWindow", "X"))
        self.Y_resolution.setCurrentText(_translate("mainWindow", "128"))
        self.Y_resolution.setItemText(0, _translate("mainWindow", "64"))
        self.Y_resolution.setItemText(1, _translate("mainWindow", "128"))
        self.Y_resolution.setItemText(2, _translate("mainWindow", "256"))
        self.Transform_overlayed_sim()


# convert Integer to Float (and vise versa) for the QDoubleSpinBoxs
    def Mag_convert_slider(self): self.Mag_val.setValue(float(self.Mag_slider.value()/100))
    def Mag_convert_val(self): self.Mag_slider.setValue(int(self.Mag_val.value()*100))
    def Trans_convert_slider(self): self.Ttransp_val.setValue(float(self.Transparency_slider.value()/10))
    def Trans_convert_val(self): self.Transparency_slider.setValue(int(self.Ttransp_val.value()*10))
    def Cs_convert_slider(self): self.Cs_val.setValue(float(self.Cs_slider.value()/1000))
    def Cs_convert_val(self): self.Cs_slider.setValue(int(self.Cs_val.value()*1000))
    def Aperture_convert_slider(self): self.Aperture_val.setValue(float(self.Aperture_slider.value()/10))
    def Aperture_convert_val(self): self.Aperture_slider.setValue(int(self.Aperture_val.value()*10))
    def Conv_convert_slider(self): self.ConvAngle.setValue(float(self.Conv_slider.value()/10))
    def Conv_convert_val(self): self.Conv_slider.setValue(int(self.ConvAngle.value()*10))
    def Mag_val_default(self): self.Mag_slider.setValue(25)
    def Rot_val_default(self): self.Rot_slider.setValue(0)
    def ShiftX_val_default(self): self.X_slider.setValue(0)
    def ShiftY_val_default(self): self.Y_slider.setValue(0)
    def Trans_val_default(self): self.Transparency_slider.setValue(10)
    def AcclV_val_default(self): self.accelV_slider.setValue(300)
    def Duplicate_val_default(self): self.Dup_slider.setValue(2) , self.muSTEM_Input_file()
    def Cs_val_default(self): self.Cs_slider.setValue(0) , self.muSTEM_Input_file()
    def Def_val_default(self): self.Def_slider.setValue(0) , self.muSTEM_Input_file()
    def Aperture_val_default(self): self.Aperture_slider.setValue(250) , self.muSTEM_Input_file()
    def Thick_val_default(self): self.Thick_slider.setValue(10) , self.muSTEM_Input_file()
    
    def open_Exp_dialog_box(self, path):
        filename = QFileDialog.getOpenFileName()
        path = filename[0]
        print(path)
        big_img = Image.open(path).convert('P')
        big_img = big_img.resize((512,512))
        big_img = big_img.save("big.png")
        self.Filename_text.setText(path)
        self.Exp_image.setPixmap(QtGui.QPixmap(path))
        self.Transform_overlayed_sim()

    def open_CIF_dialog_box(self, path):
        CIFfilename = QFileDialog.getOpenFileName(None,'Select CIF file',"", "CIF files (*.cif)")
        path = CIFfilename[0]
        CIFname = os.path.basename(path)
        self.CIF_filename.setText(os.path.splitext(CIFname)[0])
        self.ATOMSK_create_crystal()


    def Transform_overlayed_sim(self):

        def normxcorr2(template, image, mode="full"):
            """
            Input arrays should be floating point numbers.
            :param template: N-D array, of template or filter you are using for cross-correlation.
            Must be less or equal dimensions to image.
            Length of each dimension must be less than length of image.
            :param image: N-D array
            :param mode: Options, "full", "valid", "same"
            full (Default): The output of fftconvolve is the full discrete linear convolution of the inputs. 
            Output size will be image size + 1/2 template size in each dimension.
            valid: The output consists only of those elements that do not rely on the zero-padding.
            same: The output is the same size as image, centered with respect to the ‘full’ output.
            :return: N-D array of same dimensions as image. Size depends on mode parameter.
            https://github.com/Sabrewarrior/normxcorr2-python/blob/master/normxcorr2.py
            """
        
            # If this happens, it is probably a mistake
            if np.ndim(template) > np.ndim(image) or \
                    len([i for i in range(np.ndim(template)) if template.shape[i] > image.shape[i]]) > 0:
                print("normxcorr2: TEMPLATE larger than IMG. Arguments may be swapped.")
        
            template = template - np.mean(template)
            image = image - np.mean(image)
        
            a1 = np.ones(template.shape)
            # Faster to flip up down and left right then use fftconvolve instead of scipy's correlate
            ar = np.flipud(np.fliplr(template))
            out = fftconvolve(image, ar.conj(), mode=mode)
            
            image = fftconvolve(np.square(image), a1, mode=mode) - \
                    np.square(fftconvolve(image, a1, mode=mode)) / (np.prod(template.shape))
        
            # Remove small machine precision errors after subtraction
            image[np.where(image < 0)] = 0
        
            template = np.sum(np.square(template))
            out = out / np.sqrt(image * template)
        
            # Remove any divisions by 0 or very close to 0
            out[np.where(np.logical_not(np.isfinite(out)))] = 0
            
            return out

        os.chdir(home_path)
#        print(str(self.X_resolution.text()))
#        print(self.Mag_val.value())
        xy_width = int(512)
        base_pixmap = QtGui.QPixmap("big.png")
        im = Image.open("muSTEM_ATOMSK/sim.png").convert('RGBA')
        newsize = (int(512*self.Mag_val.value()), int(512*self.Mag_val.value()))
#        print(newsize[0])
        im = im.resize(newsize)        
        cm_hot = mpl.cm.get_cmap(str(self.colormap_combo.currentText()))
#        cm_hot = mpl.cm.get_cmap('hot')
        img_src = im.convert('L')
        img_src.thumbnail((512,512))
        im = np.array(img_src)
        im = cm_hot(im)
        im = np.uint8(im * 255)
        im = Image.fromarray(im)
        
        im_rot = im.rotate(-self.Rot_val.value(), expand=True)
        width, height = im_rot.size   # Get dimensions

        left = (width - 512)/2
        top = (height - 512)/2
        right = (width + 512)/2
        bottom = (height + 512)/2

# Crop the center of the image
        im_new = im_rot.crop((left, top, right, bottom))
        im1 = ImageQt.ImageQt(im_new)
        overlay_pixmap = QtGui.QPixmap.fromImage(im1)

        r = QtCore.QRectF()
        r.setSize(xy_width * QtCore.QSizeF(1, 1))
        r.moveCenter(base_pixmap.rect().center())
        r.translate(self.X_slider.value(), self.Y_slider.value())
        path = QtGui.QPainterPath()
        path.addRect(r)
        painter = QtGui.QPainter(base_pixmap)
        painter.setOpacity(self.Ttransp_val.value())
        painter.setRenderHints(
            QtGui.QPainter.Antialiasing | QtGui.QPainter.SmoothPixmapTransform
        )
        painter.setClipPath(path, QtCore.Qt.IntersectClip)
#        painter.rotate(self.Rot_val.value())
        painter.translate(self.X_slider.value(), -self.Y_slider.value())
        painter.drawPixmap(QtCore.QPoint(), overlay_pixmap)
        painter.end()

        org_img = Image.open("big.png").convert('RGBA')

        posX = org_img.width/2 + self.X_slider.value()
        posY = org_img.height/2 - self.Y_slider.value()

#        print(posX,posY)

        rot_angle = +self.Rot_val.value()
        org_img = org_img.rotate(rot_angle, center=(posX, posY), translate=(org_img.width/2-posX, org_img.height/2-posY))
#        print(org_img.width)
        box = (org_img.width/2-newsize[0]/2, org_img.height/2-newsize[0]/2, org_img.width/2+newsize[0]/2, org_img.height/2+newsize[0]/2)
        cropped_image = org_img.crop(box)
        cropped_image = cropped_image.resize((128,128))

#        cropped_image.show()
        cropped_image.save("temp.png")

        i1 = np.asarray(Image.open("muSTEM_ATOMSK\sim.png").convert('L'))
#        i2 = Image.open("muSTEM_ATOMSK/sim2.png").convert('L')
        i2 = np.asarray(Image.open("temp.png").convert('L'))

#        score=uqi(i1,i2)     # This is the Matching Metrics used
        score = np.max(normxcorr2(i1,i2,mode="full"))


#        score=5     # This is the Matching Metrics used

#        assert i1.mode == i2.mode, "Different kinds of images."
#        assert i1.size == i2.size, "Different sizes."
 
#        pairs = zip(i1.getdata(), i2.getdata())
#        if len(i1.getbands()) == 1:
    # for gray-scale jpegs
#            dif = sum(abs(p1-p2) for p1,p2 in pairs)
#        else:
#            dif = sum(abs(c1-c2) for p1,p2 in pairs for c1,c2 in zip(p1,p2))
 
#        ncomponents = i1.size[0] * i1.size[1] * 3

#        print ("Difference (percentage):", (dif / 255.0 * 100) / ncomponents)

        self.update_small_images_and_score(score)

        self.Exp_image.setPixmap(base_pixmap)

    def update_small_images_and_score(self,score):
        self.XCC_score.setText("%0.2f" % (score))
        self.small_Sim_image.setPixmap(QtGui.QPixmap("muSTEM_ATOMSK/sim.png"))
        self.small_Exp_image.setPixmap(QtGui.QPixmap("temp.png"))
        


    def cel2muSTEM(self):

        os.chdir(home_path+'\muSTEM_ATOMSK')

        # Element reference table
        # Each row is of the form: "Element Name", Z, Fractional Occupancy, and
        # Debye-Waller Factor / (8*Pi^2)
        #
        # Values are taken at 300 K from "Debye-Waller Factors and Absorptive Scattering Factors of
        # Elemental Crystals" by L.M. Peng et al. in Acta Crystallographica Section A: Foundations of
        # Crystallography (ISSN: 0108-7673)
        #
        # Replace these values with the ones specific to your compound for the most accurate results
        reference_table = ["Li", 3, 1, "6.24E-2",   # BCC
                           "Be", 4, 1, "5.49E-3",   # HCP
                           "B", 5, 1, "5.49E-3",    # 
                           "C", 6, 1, "1.83E-3",    # DIA
                           "N", 7, 1, "1.83E-3",    # DIA
                           "O",  8,  1, "9.275E-3", #
                           "Na", 11, 1, "8.63E-2",  # BCC
                           "Mg", 12, 1, "2.35E-2",  # HCP
                           "Al", 13, 1, "1.01E-2",  # FCC
                           "Si", 14, 1, "6.29E-3",  # DIA
                           "P", 15, 1, "1.39E-1",   # 
                           "S", 16, 1, "1.39E-1",   # 
                           "K", 19, 1, "1.39E-1",   # BCC
                           "Ca", 20, 1, "2.59E-2",  # FCC
                           "Sc", 21, 1, "9.67E-2",  # HCP
                           "Ti", 22, 1, "6.66E-3",  # HCP
                           "V", 23, 1, "7.42E-3",   # BCC
                           "Cr", 24, 1, "3.25E-3",  # BCC
                           "Mn", 25, 1, "0.1E-3",   # BCC?
                           "Fe", 26, 1, "4.21E-3",  # BCC -> DWF = 7.23E-3 for FCC
                           "Ni", 28, 1, "4.62E-3",  # FCC
                           "Cu", 29, 1, "7.14E-3",  # FCC
                           "Zn", 30, 1, "1.48E-2",  # HCP
                           "Ga", 31, 1, "7.78E-3",  # DIA
                           "Ge", 32, 1, "7.78E-3",  # DIA
                           "As", 33, 1, "7.78E-3",  # DIA
                           "Rb", 37, 1, "1.71E-1",  # BCC
                           "Sr", 38, 1, "4.91E-2",  # BCC
                           "Y", 39, 1, "1.11E-2",   # HCP
                           "Zr", 40, 1, "7.37E-3",  # HCP
                           "Nb", 41, 1, "5.83E-3",  # BCC
                           "Mo", 42, 1, "2.79E-3",  # BCC
                           "Pd", 46, 1, "5.78E-3",  # FCC
                           "Ag", 47, 1, "9.52E-3",  # FCC
                           "Cd", 48, 1, "7.78E-3",  # 
                           "In", 49, 1, "7.78E-3",  # 
                           "Sn", 50, 1, "1.47E-2",  # DIA
                           "Te", 52, 1, "1.47E-2",  # DIA
                           "Cs", 55, 1, "2.26E-1",  # BCC
                           "Ba", 56, 1, "3.97E-2",  # BCC
                           "La", 57, 1, "2.40E-2",  # FCC
                           "Tb", 65, 1, "1.31E-2",  # HCP
                           "Ho", 67, 1, "1.09E-2",  # HCP
                           "Ta", 73, 1, "4.18E-3",  # BCC
                           "W", 74, 1, "2.07E-3",   # BCC
                           "Pt", 78, 1, "4.83E-3",  # FCC
                           "Au", 79, 1, "8.04E-3",  # FCC
                           "Pb", 82, 1, "2.76E-2", # FCC
                           "Bi", 83, 1, "2.76E-2",] # FCC
        
        
        
        line_num = 0
        lines = ['']
        coord_line = -1
        #file_data = np.array((20, 9), dtype = 'object')
        #file_data[2,:]=' '
        input_file = 'simulated.cel'
#        input_file_path = 'D:/Dropbox/Yarons-files/HREM-DIMA/Python/muSTEM_ATOMSK/'
        input_file_path = home_path + '\muSTEM_ATOMSK/'
        input_file_name, input_file_extension = os.path.splitext(input_file)
        output_file_name = input_file_name + "_converted.xtl"
        
        with open(input_file_path+input_file, 'r') as r:
        #with open('D:/Dropbox/Yarons-files/HREM-DIMA/Python/muSTEM_ATOMSK/muTEM_crystal - large.cel', 'r') as r:
            for line in sorted(r):
        #        print(line, end='')
                line=line.replace("-",'')
                lines.append(line.split())             #'\n' newline 
                line_num += 1
        
        
        #print (len(lines))        
        
        #spl_lines = lines[2].split
        #print (spl_lines())
        
        #newList = [[subitem.split()[0] for subitem in item.split('\t')] for item in lines]
        #print(newList)
        
        startx = 1
        starty = 1
        endx = 1
        endy = 3
        
        sublist = []
        for x in range(startx, endx):
             sublist.append(lines[x][starty:endy])
            
            
        y = np.array(lines[4:line_num+1])
        #print(y[:,1:4])
        
        (unique, counts) = np.unique(y[:,0], return_counts=True)
        frequencies = np.asarray((unique, counts)).T
        
        #print(unique)
        #print(counts)
        #print(np.array(lines[1][1:7]))
        
        with open(output_file_name, 'w') as f:
                f.writelines(['comments','\n'])
                f.writelines('   '.join(lines[1][1:7]))
                f.writelines(['\n',str(len(unique)),'\n'])
                for atom_type in frequencies:
                    f.writelines([str(atom_type[0]),'\n'])
                    atom_index = reference_table.index(atom_type[0])
                    f.writelines([str(atom_type[1]),'  ',str(reference_table[atom_index+1]),
                                  '  ',str(reference_table[atom_index+2]),
                                  '  ',str(reference_table[atom_index+3]),'\n'])
        #            print(atom_type[1])
                    for atom_num in range(int(atom_type[1])):
                        coord_line += 1 
                        f.writelines([str(y[coord_line,1]),'  ',str(y[coord_line,2]),
                                  '  ',str(y[coord_line,3]),'\n'])
                f.writelines(['EOF'])
                f.close()
#        os.chdir('..')
                
        
    def muSTEM_Input_file(self):
        path = home_path + "\muSTEM_ATOMSK"
        os.chdir(path)

        x_resolution = int(self.X_resolution.currentText())
        y_resolution = int(self.Y_resolution.currentText())
        with open("simulated_converted.xtl", "r") as file: line = file.readlines()[1]
        a_cell = float(line.split()[0])
        b_cell = float(line.split()[1])
        ratio = a_cell/b_cell
        if a_cell > b_cell : 
            x_resolution = round(128*ratio)
        if a_cell < b_cell : 
            y_resolution = round(128/ratio)

        lines = [
            'Output filename',
            '    Results\yk',
            'Input crystal file name',
            '    simulated_converted.xtl',
            'Probe accelerating voltage (kV)',
            '    '+str(self.accelV.value()),
            'Slice unit cell <1> yes <2> no',
            '    2',
            'Thickness',
            '    '+str(self.Thick_val.value()),
#            '    25',
            'Scattering factor accuracy',
            '    2',
            'Tile supercell x',
            '    '+str(self.Duplicate_val.value()),
#            '    1',
            'Tile supercell y',
            '    '+str(self.Duplicate_val.value()),
#            '    1',
            'Number of pixels in x',
            '    '+str(x_resolution),
            'Number of pixels in y',
            '    '+str(y_resolution),
            '<1> Continue <2> Change',
            '    1',
            'Calculation type',
            '    1',
            '<1> QEP <2> ABS',
            '    2',
            '<1> Absorption <2> No absorption',
            '    2',
            '<0> continue <1> beam tilt <2> specimen tilt',
            '    0',
            '<0> continue <1> save <2> load',
            '    0',
            'aperture cutoff',
            '    '+str(self.Aperture_val.value()),
            'Defocus',
            '    '+str(self.Def_val.value()*10),
#            '    -560',
            'Change image forming lens parameters',
            '    6',
            '3rd order spher. coefficient',
            '    '+str(self.Cs_val.value()*1e7),
            'Change image forming lens parameters',
            '    0',
            '<0> Precalculated potentials <1> On-the-fly calculation',
            '    0'
            ]
    
        if os.path.exists("yk_test.txt"):
            os.remove("yk_test.txt")
        else:
            print("The file does not exist")

        with open('yk_test.txt', 'w') as f:
                f.writelines('\n'.join(lines))
                f.close()
            
        shutil.rmtree('Results')
    
        os.system('CPU_muSTEM_v5.3_double_precision.exe nopause > muSTEM_out.txt')
        
        filename = 'Results\yk_Image_'+str(x_resolution)+'x'+str(y_resolution)+'.bin'
        assert os.path.exists(filename), filename+' does not exist'
    	#Parse filename for array dimensions
        m = re.search('([0-9]+)x([0-9]+)',filename)
        if m:
            y = int(m.group(2))
            x = int(m.group(1))
    	#Get file size and intuit datatype
        size =  os.path.getsize(filename)
        if (size/(y*x) == 4):
            dtype = '>f4'
        elif(size/(y*x) == 8):
            dtype = '>f8'
#        print (dtype)
    	#Read data and reshape as required.
        x = np.reshape(np.fromfile(filename,dtype = dtype),(y,x))
        c = (255*(x - np.min(x))/np.ptp(x)).astype(int)
#        print(c[64,64])
        img = Image.fromarray(c.astype(np.double))
#        print(img.size)

        img_width, img_height = img.size
        box = ((img_width - min(img.size)) // 2,
        (img_height - min(img.size)) // 2,
        (img_width + min(img.size)) // 2,
        (img_height + min(img.size)) // 2)

        old_im = img.crop(box)
#        old_size = old_im.size

#        new_size = (512, 512)
#        new_im = Image.new("RGB", new_size)   ## luckily, this is already black!
#        new_im.paste(old_im, ((new_size[0]-old_size[0])//2,(new_size[1]-old_size[1])//2))

#        new_im.show()

        old_im.convert('RGB').save('sim.png', "PNG", optimize=True)
#        os.chdir("..")
        self.Transform_overlayed_sim()

    def ATOMSK_create_crystal(self):
        path= home_path + "\muSTEM_ATOMSK"
        os.chdir(path)
        if os.path.exists("simulated_converted.xtl"): os.remove("simulated_converted.xtl")
        if os.path.exists("simulated.cel"): os.remove("simulated.cel")

        atomsk_cmd0 = 'atomsk '+self.CIF_filename.text()+'.cif ' \
            '-orient [100] [010] [001] '+self.new_X_axis.text()+' '+self.new_Y_axis.text()+' '+self.new_Z_axis.text()+' ' \
                '-orthogonal-cell -duplicate 10 10 10 ' \
                    '-cut above 10 x -cut above 10 y -cut above 20 z ' \
                        '-cell set 10 H1 -cell set 10 H2 -cell set 20 H3 ' \
                            'simulated.cel  > ATOMSK_out.txt'

        atomsk_cmd1 = 'atomsk '+self.CIF_filename.text()+'.cif ' \
            '-orient [100] [010] [001] '+self.new_X_axis.text()+' '+self.new_Y_axis.text()+' '+self.new_Z_axis.text()+' ' \
                '-orthogonal-cell -reduce-cell simulated.cel'

#        print(atomsk_cmd)
        os.system(atomsk_cmd0)
#        time.sleep(0.5)
#        os.chdir('..')
        self.cel2muSTEM()
        self.muSTEM_Input_file()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    mainWindow = QtWidgets.QMainWindow()
    ui = Ui_mainWindow()
    ui.setupUi(mainWindow)
    mainWindow.show()
    sys.exit(app.exec_())

